# Loppuraportti
	## Ohjelman logiikan kuvaus
		### Sekvenssikaavio
		### tshark-konversio
		### dekoodaus ja dbc-tiedosto
	## Opittuja asioita
		### pipeline-ajattelu vs yhtenäinen python-projekti
			#### windows- ja linux-skriptien ylläpitämisen vaikeus
			#### tshark vs pyshark
		### visualisointi
		### DBC
		### VSS
		### Diffpriv
	## Jatkokehitysideoita
		### Työkalun käyttö oikealla datalla ja oikeilla käyttötapauksilla -> kehityskohteiden listaus (ainakin suorituksen optimointi ja tutkijoiden workflow:n ymmärtäminen)
		### konvertoidun datan filtteröinti ennen dekoodausta
		### DBC-tiedosto on kaiken avain - sen tarkempi ymmärtäminen tärkeää tulosten verifioimiseksi







## dekoodaus

Raakadata konvertoidaan ymmärrettäväksi informaatioksi dekoodaamalla se mallikohtaista .dbc -tiedostoa vasten.

Pythonin cantools-kirjasto dekoodaa raakadatan .canId -kentästä ECU:n nimen, ja .data -kentästä signaalin osat.

Lisätietoa:
https://github.com/commaai/opendbc
https://pypi.org/project/cantools/
https://www.csselectronics.com/pages/can-dbc-file-database-intro


## Lopputuotos: json

-> tähän kuvaus jsonin rakenteesta

## tallennus ja tilastointi


### VSS -konversio
valitsimella --vss tehdään signaaleille konversio DBC-muodosta VSS-muotoon.

VSS:n mukaisia tietoja ei voi suoraan päivittää DBC-tiedostoon, koska DBC-formaatti ei tue pisteitä signaalien mimissä.

Muunnos on toteutettu käsin tehdyllä mäppäyksellä, joka ylikirjoittaa DBC-signaalin nimen VSS:n mukaisella nimellä.

Mäppäystalukon arvot ovat valistuneita arvauksia. Taulukko on puutteellinen.

Mäppäyksen parantaminen vaatisi DBC-tiedoston parempaa tuntemista ja mahdollisia yksittäisten signaalinen konversioita.

Esimerkkiksi Chassis.Chassis.Brake.PedalPosition sisältää arvon prosenteissa välillä 0-100. 
DBC-tiedostossa oleva BRAKE.BRAKE_PEDAL sisältää arvon välillä 0-255.

BRAKE_PEDAL -arvo saattaa olla suoraan muunnettavissa prosenteiksi, mutta arvo toi ECU:sta riippuen tarkoittaa myös jotain muuta.




Jatkokehitystarve: DBC-formaatissa on message name ("BO_") ja signaali ("SG_"). Mäppäys tehdään nyt ainoastaan signaalin perusteella. Esimerkkinä käytetyssä DBC-tiedostossa on muutamia signaaleita, jotka ovat käytössä useammassa viestissä.


Lisätietoa:
https://github.com/COVESA/vehicle_signal_specification
